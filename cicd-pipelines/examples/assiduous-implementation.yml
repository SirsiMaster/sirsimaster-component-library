name: Assiduous CI/CD Pipeline
# Example implementation of the Universal CI/CD Template for Assiduous

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
          - development

# Use the universal template as a reusable workflow
jobs:
  # Determine environment based on branch
  setup:
    name: 🎯 Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      provider: ${{ steps.env.outputs.provider }}
    steps:
      - id: env
        run: |
          # Manual dispatch takes priority
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            ENV="${{ github.event.inputs.environment }}"
          # Branch-based environment detection
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            ENV="staging"
          else
            ENV="development"
          fi
          
          # Set provider based on environment
          case $ENV in
            production)
              PROVIDER="firebase"
              ;;
            staging)
              PROVIDER="firebase"
              ;;
            development)
              PROVIDER="firebase"
              ;;
          esac
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "provider=$PROVIDER" >> $GITHUB_OUTPUT
          echo "🎯 Deploying to $ENV using $PROVIDER"

  # Call the universal pipeline
  deploy:
    name: 🚀 Deploy Assiduous
    needs: setup
    uses: ./.github/workflows/universal-deploy.yml
    with:
      provider: ${{ needs.setup.outputs.provider }}
      environment: ${{ needs.setup.outputs.environment }}
      node-version: '18'
      build-command: 'echo "No build needed for static site"'
      test-command: 'echo "Tests passed"'
      output-directory: 'assiduous-build'
      enable-testing: false
      enable-caching: true
      enable-security-scan: true
      enable-metrics: true
    secrets: inherit

  # Assiduous-specific post-deployment tasks
  post-deploy:
    name: 📊 Update Metrics Dashboard
    needs: [setup, deploy]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Update Development Metrics
        run: |
          # Update metrics cache with deployment info
          cat > admin/development/deployment-metrics.json << EOF
          {
            "lastDeployment": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ needs.setup.outputs.environment }}",
            "provider": "${{ needs.setup.outputs.provider }}",
            "commit": "${{ github.sha }}",
            "author": "${{ github.actor }}",
            "branch": "${{ github.ref_name }}",
            "runNumber": "${{ github.run_number }}",
            "status": "success"
          }
          EOF
          
          echo "📊 Metrics updated"
      
      - name: Sync to Firebase
        if: needs.setup.outputs.environment == 'production'
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          # Deploy just the metrics update
          npm install -g firebase-tools
          firebase deploy \
            --only hosting:files="/admin/development/deployment-metrics.json" \
            --project assiduous-prod \
            --token "$FIREBASE_TOKEN"

  # Notify on completion
  notify:
    name: 📢 Send Notifications
    needs: [setup, deploy, post-deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine Status
        id: status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "text=succeeded" >> $GITHUB_OUTPUT
            echo "color=#36a64f" >> $GITHUB_OUTPUT
          else
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "text=failed" >> $GITHUB_OUTPUT
            echo "color=#ff0000" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack Notification
        if: vars.SLACK_WEBHOOK
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.status.outputs.emoji }} Assiduous Deployment ${{ steps.status.outputs.text }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ needs.setup.outputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Provider:*\n${{ needs.setup.outputs.provider }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Deployment"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Site"
                      },
                      "url": "https://assiduousflip.web.app"
                    }
                  ]
                }
              ]
            }'
      
      - name: Create GitHub Summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status: ${{ steps.status.outputs.emoji }} ${{ steps.status.outputs.text }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Provider:** ${{ needs.setup.outputs.provider }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 View Live Site](https://assiduousflip.web.app)" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 View Metrics](https://assiduousflip.web.app/admin/development/dashboard.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
